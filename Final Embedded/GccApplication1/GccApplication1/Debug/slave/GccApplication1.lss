
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a7  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000687  00000000  00000000  00000a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d0  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035a  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000077  00000000  00000000  00001896  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000190d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6d 00 	call	0xda	; 0xda <main>
  74:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <slave_main>:
char s;

void slave_main(void)
{
    char tdata, rdata;
    SPI_VidInt(SLAVE);
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	0e 94 72 00 	call	0xe4	; 0xe4 <SPI_VidInt>

    s = 0;
  82:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    DDRC = 0xff;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	84 bb       	out	0x14, r24	; 20
    OCR0 = s;
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	8c bf       	out	0x3c, r24	; 60
    TCCR0 = 0x64;
  90:	84 e6       	ldi	r24, 0x64	; 100
  92:	83 bf       	out	0x33, r24	; 51
    MCUCR = 0x02;
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	85 bf       	out	0x35, r24	; 53
    MCUCSR = 0x00;
  98:	14 be       	out	0x34, r1	; 52

    SETBIT(DDRD, PD7);
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	81 bb       	out	0x11, r24	; 17
    SETBIT(DDRB, PB3);
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	87 bb       	out	0x17, r24	; 23

    while (1)
    {
		tdata = 0;
        rdata = SPI_TransRec(tdata);
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 9c 00 	call	0x138	; 0x138 <SPI_TransRec>
        if (rdata == 1)
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	31 f4       	brne	.+12     	; 0xbc <slave_main+0x40>
        {
            s += 10;
  b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	86 5f       	subi	r24, 0xF6	; 246
  b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ba:	09 c0       	rjmp	.+18     	; 0xce <slave_main+0x52>
        }
        else if (rdata == 2)
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	39 f4       	brne	.+14     	; 0xce <slave_main+0x52>
        {
            if (s != 0)
  c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c4:	88 23       	and	r24, r24
  c6:	19 f0       	breq	.+6      	; 0xce <slave_main+0x52>
            {
                s -= 10;
  c8:	8a 50       	subi	r24, 0x0A	; 10
  ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
            }
        }

        PORTC = 0x01;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	85 bb       	out	0x15, r24	; 21
        OCR0 = s;
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	8c bf       	out	0x3c, r24	; 60
    }
  d8:	e6 cf       	rjmp	.-52     	; 0xa6 <slave_main+0x2a>

000000da <main>:
#include "spi.h"


int main(void)
{
	slave_main();
  da:	0e 94 3e 00 	call	0x7c	; 0x7c <slave_main>
	//master_main();
	return 0;
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	08 95       	ret

000000e4 <SPI_VidInt>:
#include <avr/io.h>
#include <util/delay.h>

void SPI_VidInt(SPIMODE_t mode)
{
    if (mode == MASTER)
  e4:	81 11       	cpse	r24, r1
  e6:	13 c0       	rjmp	.+38     	; 0x10e <SPI_VidInt+0x2a>
    {
        SETBIT(DDRB, 4);   // SS
  e8:	87 b3       	in	r24, 0x17	; 23
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	87 bb       	out	0x17, r24	; 23
        SETBIT(DDRB, 5);   // MOSI
  ee:	87 b3       	in	r24, 0x17	; 23
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	87 bb       	out	0x17, r24	; 23
        SETBIT(DDRB, 7);   // sck
  f4:	87 b3       	in	r24, 0x17	; 23
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	87 bb       	out	0x17, r24	; 23
        CLEARBIT(DDRB, 6); // MISO
  fa:	87 b3       	in	r24, 0x17	; 23
  fc:	8f 7b       	andi	r24, 0xBF	; 191
  fe:	87 bb       	out	0x17, r24	; 23
        SETBIT(PORTB, 4);
 100:	88 b3       	in	r24, 0x18	; 24
 102:	80 61       	ori	r24, 0x10	; 16
 104:	88 bb       	out	0x18, r24	; 24
        SETBIT(SPCR, MSTR);
 106:	8d b1       	in	r24, 0x0d	; 13
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	8d b9       	out	0x0d, r24	; 13
 10c:	11 c0       	rjmp	.+34     	; 0x130 <SPI_VidInt+0x4c>
    }
    else if (mode == SLAVE)
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	79 f4       	brne	.+30     	; 0x130 <SPI_VidInt+0x4c>
    {
        CLEARBIT(DDRB, 4); // SS
 112:	87 b3       	in	r24, 0x17	; 23
 114:	8f 7e       	andi	r24, 0xEF	; 239
 116:	87 bb       	out	0x17, r24	; 23
        CLEARBIT(DDRB, 5); // MOSI
 118:	87 b3       	in	r24, 0x17	; 23
 11a:	8f 7d       	andi	r24, 0xDF	; 223
 11c:	87 bb       	out	0x17, r24	; 23
        CLEARBIT(DDRB, 7); // sck
 11e:	87 b3       	in	r24, 0x17	; 23
 120:	8f 77       	andi	r24, 0x7F	; 127
 122:	87 bb       	out	0x17, r24	; 23
        SETBIT(DDRB, 6);   // MISO
 124:	87 b3       	in	r24, 0x17	; 23
 126:	80 64       	ori	r24, 0x40	; 64
 128:	87 bb       	out	0x17, r24	; 23
        CLEARBIT(SPCR, MSTR);
 12a:	8d b1       	in	r24, 0x0d	; 13
 12c:	8f 7e       	andi	r24, 0xEF	; 239
 12e:	8d b9       	out	0x0d, r24	; 13
    }

    SETBIT(SPCR, SPE);
 130:	8d b1       	in	r24, 0x0d	; 13
 132:	80 64       	ori	r24, 0x40	; 64
 134:	8d b9       	out	0x0d, r24	; 13
 136:	08 95       	ret

00000138 <SPI_TransRec>:
}

char SPI_TransRec(char data)
{
    SPDR = data;
 138:	8f b9       	out	0x0f, r24	; 15
    while (!READBIT(SPSR, SPIF))
 13a:	77 9b       	sbis	0x0e, 7	; 14
 13c:	fe cf       	rjmp	.-4      	; 0x13a <SPI_TransRec+0x2>
        ;
    return SPDR;
 13e:	8f b1       	in	r24, 0x0f	; 15
}
 140:	08 95       	ret

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
